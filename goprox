#!/bin/zsh

#
# The MIT License (MIT)
#
# Copyright (c) 2022 by Oliver Ratzesberger
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

__author__='Oliver Ratzesberger <https://github.com/fxstein>'
__copyright__='Copyright (C) 2022 Oliver Ratzesberger'
__license__='MIT'
__version__='0.3dev'
__github__='https://github.com/fxstein/GoProX'
__this__=$(basename $0)

readonly BANNER="$__this__ v$__version__
$__copyright__
License: $__license__
$__github__
"
readonly HELP_TEXT="Available Options:
-h --help
-s: --source:
-t: --target:
-c: --copyright:
-i --import
-p: --process:
-a --archive
--clean
--config:
--debug
--setup
--firmware
--time::
--test
"

# Various defaults
readonly DEFAULT_CONFIG=~/.goprox
readonly DEFAULT_SOURCE="."
readonly DEFAULT_TARGET=""
readonly DEFAULT_COPYRIGHT=""
readonly DEFAULT_TIMEFORMAT='%Y-%m-%d %H:%M:%S'

readonly TIMESTAMP_PRE='perl -pe '"'"'use POSIX strftime; $|=1; print strftime "['
readonly TIMESTAMP_POST='] ", localtime'"'"
readonly DEFAULT_OUTPUT='tee'

readonly GOPROX=$(which ${__this__})
readonly REALGOPROX=$(readlink $GOPROX)
readonly GOPROX_HOME=$(dirname $REALGOPROX)

# Initializing...
config=$DEFAULT_CONFIG
source=$DEFAULT_SOURCE
target=$DEFAULT_TARGET
copyright=$DEFAULT_COPYRIGHT
output=$DEFAULT_OUTPUT
test=false
setup=false
debug=false
import=false
process=false
archive=false
clean=false
firmware=false
sourceopt=""
targetopt=""
processopt=""
copyrightopt=""

funtion _info()
{
  echo $fg[green]"Info: "$1 $2$reset_color
}

funtion _warning()
{
  echo $fg[yellow]"Warning: "$1 $2$reset_color
}

funtion _error()
{
  >&2 echo $fg[red]"Error: "$1 $2$reset_color
}

function _debug()
{
  # DOES NOT work on eg args listing
  #[ "$debug" = true ] &&  $@
  echo $fg[blue]"Debug: "$1 $2$reset_color
}

function _help()
{
  echo $HELP_TEXT
}

function _setup()
{
  # check if file exists
  if [[ -f "$config" ]]; then
    _info "Existing $config file."
    timestamp=`date +%s`
    backup=$config.bak.$timestamp
    _info "Creating backup: $backup"
    mv $config $backup
  fi
  touch $config

  if [ $? -ne 0 ]
  then
    _error "Unable to create config file: $config"
    exit(1)
  fi

  _info "Source: "$source
  _info "Target: "$target
  _info "Copyright: "$copyright

  _info "Writing config file: $config"
  echo "source="$source>>$config
  echo "target=\""$target"\"">>$config
  echo "copyright=\""$copyright"\"">>$config
  _info "Config saved as $config"
}

function _import_media()
{
  importdir=$target/imported
  _info "Starting media import..."
  _info "Source: "$source
  _info "Target: "$importdir

  exiftool -r -progress -q -q -o "${importdir}"'/NODATE/'\
  '-FileCreateDate<FileCreateDate'\
  '-FileCreateDate<CreateDate'\
  '-filename<${FileName}'\
  '-filename<${FileCreateDate;DateFmt("%Y%m%d%H%M%S")}_NODATA_%f.%e'\
  '-filename<${CreateDate;DateFmt("%Y%m%d%H%M%S")}_NODATA_%f.%e'\
  '-filename<${CreateDate;DateFmt("%Y%m%d%H%M%S")}_'\
'${Model;s/\s/_/g;}_%f.%e'\
  '-filename<${CreateDate;DateFmt("%Y%m%d%H%M%S")}_'\
'${Model;s/\s/_/g;}_'\
'${CameraSerialNumber;$_=substr($_,-4);}_%f.%e'\
  '-directory<'"${importdir}"'/${FileCreateDate;DateFmt("%Y")}/${FileCreateDate;DateFmt("%Y%m%d")}'\
  '-directory<'"${importdir}"'/${CreateDate;DateFmt("%Y")}/${CreateDate;DateFmt("%Y%m%d")}'\
  --ext lrv --ext thm --ext xmp --ext .\
  -api 'Filter=s/HERO10 Black/GoPro_Hero10/g;'\
's/HERO9 Black/GoPro_Hero9/g;'\
's/HERO8 Black/GoPro_Hero8/g'\
  "${source}"

  _info "Finished media import"

}

function _process_media()
{
  importdir=$target/imported
  processdir=$target/processed
  _info "Starting media processing..."
  _info "Source: "$importdir
  _info "Target: "$processdir
  _info "Process option: "$processopt

  if [[ -n $copyright ]]; then
    _info "Copyright: "$copyright
    artist="-artist="${copyright}
    author="-author="${copyright}
    xmpcopyright="-xmp:copyright="${copyright}
  fi

  # Only process files that have changed since we last ran
  # TODO: Needs to be hardened for various edge cases
  # Right now this will skip files if eg a single manual edit happens in the
  # processed tree or a processing run gets aborted.

  # Get the latest modification date in the processdir
  # zsh -c 'zmodload zsh/stat; stat +mtime -- **/*(.om[1])'
  # -if '${FileModifyDate;DateFmt("%s")} gt '"\"$(stat -f %m temp)"\"...
  lastprocess=$(stat +mtime -- ${processdir}/**/*(.om[1]))
  _debug "Latest process timestamp: ${lastprocess}"

  lastimport=$(stat +mtime -- ${importdir}/**/*(.om[1]))
  _debug "Latest import timestamp: ${lastimport}"

  if [[ $processopt == "all" ]]; then
    _info "Requested processing: ${processopt}. Processing all files from ${importdir}"
    timefilter="1"
  elif [[ -n $lastprocess ]]; then
    timefilter='${FileModifyDate;DateFmt("%s")} gt '${lastprocess}
    _debug "exiftool time filter: ${timefilter}"
  else
    _info "Process dir ${processdir} is empty. Processing all files from ${importdir}"
    timefilter="1"
  fi

  # set -x

# The following keywords and tags are being created and added in order to
# make our image files exif data accessible inside of Apple Photos and other
# Applications. By turning them into tags inside of Photos, they can be used
# to filter, sort or setup smart albums.
# Not every camera model and firmware supports all of these tags, hence the
# incremental additions that allow missing data to be ommited without error.

# Inspect raw GPS data:
# exiftool -s -a '-gps*' -n -G FILE
#
# TODO: Fix broken GPS data for GoPro MP4 file
# GPS Tag exmaple:   -QuickTime:GPSCoordinates#='52.372821 4.893702 0'\

# exiftool -r -F -sep ", " -q -q -progress -addTagsFromFile @ -o "${processdir}"'/NODATE/'\
  exiftool -r -F -sep ", " -q -q -progress -addTagsFromFile @ -o "${processdir}"'/NODATE/'\
  -if4 "${timefilter}"\
  '-FileCreateDate<FileCreateDate'\
  '-FileCreateDate<CreateDate'\
  '-filename<P_${FileName}'\
  '-directory<'"${processdir}"'/${FileType}/${FileCreateDate;DateFmt("%Y")}/${FileCreateDate;DateFmt("%Y%m%d")}'\
  '-directory<'"${processdir}"'/${FileType}/${CreateDate;DateFmt("%Y")}/${CreateDate;DateFmt("%Y%m%d")}'\
  "${artist}"\
  "${author}"\
  "${xmpcopyright}"\
  '-Subject<Camera: ${Model;s/\s/_/g;}'\
  '-Subject<Camera: ${Model;s/\s/_/g;}_${CameraSerialNumber;$_=substr($_,-4);}'\
  '-Subject+<Software: ${Software;}'\
  '-Subject+<AutoRotation: ${AutoRotation;}'\
  '-Subject+<Orientation: ${Orientation;}'\
  '-Subject+<SceneCaptureType: ${SceneCaptureType;}'\
  '-Subject+<ProTune: ${ProTune;}'\
  '-Subject+<Sharpness: ${Sharpness;}'\
  '-Subject+<MeteringMode: ${MeteringMode;}'\
  '-Subject+<GainControl: ${GainControl;}'\
  '-Subject+<Contrast: ${Contrast;}'\
  '-Subject+<Saturation: ${Saturation;}'\
  '-Subject+<WhiteBalance: ${WhiteBalance;}'\
  '-Subject+<HDRSetting: ${HDRSetting;}'\
  '-Subject+<ExposureLockUsed: ${ExposureLockUsed;}'\
  '-Subject+<ProjectionType: ${ProjectionType;}'\
  '-Subject+<ImageStabilization: ${ElectronicImageStabilization;}'\
  -api 'Filter=s/HERO10 Black/GoPro_Hero10/g;'\
's/HERO9 Black/GoPro_Hero9/g;'\
's/HERO8 Black/GoPro_Hero8/g'\
  "${importdir}"

  _info "Finished media processing"
}


function _archive_media()
{
  archivedir=$target/archive
  _info "Starting media archive..."
  _info "Source: "$source
  _info "Target: "$archivedir

  # Find first image file to get camera model and serial
  firstmedia=$(find -E . -regex '.*\.(JPG|MP4|360)' | head -n 1)
  _info "First Media: "$firstmedia

  # Camera model name
  camera=$(exiftool -Model -s -s -s "${firstmedia}"\
  -api 'Filter=s/HERO10 Black/GoPro_Hero10/g;'\
's/HERO9 Black/GoPro_Hero9/g;'\
's/HERO8 Black/GoPro_Hero8/g')

  # Last 4 digits of serial number
  serial=$(exiftool -CameraSerialNumber -s -s -s "${firstmedia}")
  timestamp=$(date +%Y%m%d%H%M%S)

  _info "Camera: "$camera
  _info "Serial: "${serial:(-4)}
  _info "Time: "$timestamp

  archivename=${timestamp}_${camera}_${serial:(-4)}

  _info "Archive: "$archivename

  tar --totals -zcvf "${archivedir}"/"${archivename}".tar.gz $source || {
    # Archive failed
    _error "Archive creation failed!"
    exit 1
  }

  _info "Finished media archive"
}

function _clean_media()
{
  _info "Cleaning Source Media..."
  _info "Source: "$source

  # Check if this is a GoPro storage card
  if [[ -f "$source/MISC/version.txt" ]]; then
    # Only proceed if we just finished archiving this media
    if [ "$archive" = true ]; then
      rm -rfv $source/DCIM $source/mdb* || {
        # Cleanup failed
        _error "Cleaning ${source} failed!"
        exit 1
      }
    else
      _error "Will not clean ${source} without prior archive"
      _error "Run options --archive and --clean together"
      exit 1
    fi
  else
    _error "Cannot verify that ${source} is a GoPro storage device"
    _error "Missing $source/MISC/version.txt"
    exit 1
  fi

  _info "Finished cleanup tasks"
}

function _firmware()
{
  _info "Installing firmware upgrade..."
  _info "Source: "$source

  # Check if this is a GoPro storage card
  if [[ -f "$source/MISC/version.txt" ]]; then

    # Extract camera model and firmware version
    # Due to some broken version.txt files for some models and firmware versions
    # we have to apply a rather complicated looking fix: remove comma from the
    # end of the second to last line in the file:
    # sed -e x -e '$ {s/,$//;p;x;}' -e 1d ./MISC/version.txt
    # Otherwise we could simply cat
    # camera=$(cat MISC/version.txt | jq '."camera type"')
    # camera=$(sed -e x -e '$ {s/,$//;p;x;}' -e 1d ./MISC/version.txt | jq '."camera type"')
    camera=$(sed -e x -e '$ {s/,$//;p;x;}' -e 1d ./MISC/version.txt | jq -r '."camera type"')
    version=$(sed -e x -e '$ {s/,$//;p;x;}' -e 1d ./MISC/version.txt | jq -r '."firmware version"')

    _info "Camera detected: ${camera}"
    _info "Existing firmware version: ${version}"

    # Get the latest firmware for the device

    _debug "GoProX home: $GOPROX_HOME"
    firmwarebase="${GOPROX_HOME}/firmware/${camera}"
    _debug "Firmware base: $firmwarebase"

    latestfirmware=(${firmwarebase}/*([-1]))
    _debug "Latest firmware: " ${latestfirmware}

    latestversion=(${latestfirmware:t})
    _debug "Latest version: " ${latestversion}

    if [[ $latestversion > $version ]]; then
      _warning "New firmware available: ${version} >> ${latestversion}"
      _warning "Transferring newer firmware to ${source}"
      unzip -u "${latestfirmware}"/UPDATE.zip -d "${source}/UPDATE" || {
        # Unzip failed
        _error "Unzip copy of firmware ${latestfirmware}/UPDATE.zip to ${source}/UPDATE failed!"
        exit 1
      }
      _info "Finished firmware transfer. Camera ${camera} will install upgrade during next power on."

    else
      _info "Camera ${camera} has the latest firmware: ${latestversion}"
    fi

  else
    _error "Cannot verify that ${source} is a GoPro storage device"
    _error "Missing $source/MISC/version.txt"
    exit 1
  fi

  _info "Finished firmware check."
}


# Enable color output
autoload colors
colors

# enable built in stat
zmodload zsh/stat


# Parse options
declare -A opts
zparseopts -D -E -F -A opts - \
            h -help \
            s: -source: \
            t: -target: \
            c: -copyright: \
            i -import \
            p: -process: \
            a -archive \
            -clean \
            -config: \
            -debug \
            -setup \
            -firmware \
            -time:: \
            -test \
	          || exit 1

# remove first -- or -
end_opts=$@[(i)(--|-)]
set -- "${@[0,end_opts-1]}" "${@[end_opts+1,-1]}"

for key val in "${(kv@)opts}"; do
  case $key in
    --config)
      config=$val
    ;;
    -c|--copyright)
      copyrightopt=$val
      #"-artist=$val -author=$val -xmp:copyright=$val"
    ;;
    --debug)
      # Turn on debug output
      debug=true
      # DEBUG output only works AFTER parameter processing has been completed
      # For manual script wide override set the $debug variable to true
    ;;
    -h|--help)
      _help
      exit 1
    ;;
    -i|--import)
      # Perform import tasks
      import=true
    ;;
    -p|--process)
      # Perform process tasks
      process=true
      # support for processing overrides
      # optional paremeter: all ((re)process all files), nd (n days of past
      # imports from now - eg 7d: process past 7 days of imported media)
      processopt=$val
    ;;
    -a|--archive)
      # Perform archive tasks
      archive=true
    ;;
    --clean)
      # Perform archive tasks
      clean=true
    ;;
    --setup)
      # Perform setup tasks
      setup=true
    ;;
    --firmware)
      # setup firmware upgrade
    firmware=true
    ;;
    -s|--source)
      sourceopt=$val
    ;;
    -t|--target)
      targetopt=$val
    ;;
    --test)
      test=true
      # Also timestamp when testing --time output
      output=$TIMESTAMP_PRE$DEFAULT_TIMEFORMAT$TIMESTAMP_POST
    ;;
    --time)
      if [[ ! -z $val ]]; then
        timeformat=$val
      else
        timeformat=$DEFAULT_TIMEFORMAT
      fi
      output=$TIMESTAMP_PRE$timeformat$TIMESTAMP_POST
    ;;
  esac
done

# so we can timestamp the output
(
echo $fg[green]$BANNER$reset_color

# Load config file first
# Check if we have a config file to work with
if [[ -f "$config" ]]; then
  _info "Loading config file: $config"
  tail $config
  source $config
fi

_debug "SourceOpt: $sourceopt"
_debug "TargetOpt: $targetopt"
_debug "CopyrightOpt: $copyrightopt"

# Now override any parameters that were specified
if [[ -n $sourceopt ]]; then
  source=$sourceopt
fi

if [[ -n $targetopt ]]; then
  target=$targetopt
fi

if [[ -n $copyrightopt ]]; then
  copyright=$copyrightopt
fi

_debug "Source: $source"
_debug "Target: $target"
_debug "Copyright: $copyright"

# Target is a mandatory config setting or parameter
if [ -z $target ] && [ "$test" != true ]; then
  # Empty Target
  _error "ERROR: Missing target!"
  _warning "Specifying target via -t: or --target: is mandatory.\n"
  _help
  exit 1
fi

# Dependencies TODO: Move to dedicated function
# only works if the exiftool is installed
_info "Validating exiftool..."
if (( ${+commands[exiftool]} )); then
    which exiftool && exiftool -ver -v
else
    _error "ERROR: Please install exiftool first, run:"
    _warning "brew install exiftool"
    exit 1
fi
_info "Validating jq..."
if (( ${+commands[jq]} )); then
    which jq && jq --version
else
    _error "ERROR: Please install jq first, run:"
    _warning "brew install jq"
    exit 1
fi

if [ "$setup" = true ]; then
  # Setup config file for current user
  _setup
  exit 0
fi

if [ "$test" = true ]; then
  _info "TESTING - Performing tests..."
  _info "Removing prior test data..."
  rm -r "./test/imported"
  rm -r "./test/processed"

  _info "Setting up test structure..."
  mkdir "./test/imported"
  mkdir "./test/processed"

  source="./test/originals"
  target="./test"
  _import_media

  copyright="This is a Test Copyright"
  _process_media

  _info "Comparing test output..."
  git diff --quiet ./test/ || {
    # changes detected
    _error "Test failed!"
    echo $fg[red]
    git diff --stat ./test/
    exit 1
  }
  _info "TESTING successful!"
  exit 0
fi

# Execute in order: archive, import, process, clean, firmware
if [ "$archive" = true ]; then
  _archive_media
fi
if [ "$import" = true ]; then
  _import_media
fi
if [ "$process" = true ]; then
  _process_media
fi
if [ "$clean" = true ]; then
  _clean_media
fi
if [ "$firmware" = true ]; then
  _firmware
fi

) 2>&1 | eval ${output}
