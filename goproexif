#!/bin/zsh

#
# The MIT License (MIT)
#
# Copyright (c) 2021 by Oliver Ratzesberger
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

__author__='Oliver Ratzesberger <https://github.com/fxstein>'
__copyright__='Copyright (C) 2021 Oliver Ratzesberger'
__license__='MIT'
__version__='0.1dev'
__github__='https://github.com/fxstein/GoProExif'
__this__=$(basename $0)

readonly BANNER="$__this__ v$__version__
$__copyright__
License: $__license__
$__github__
"
readonly HELP_TEXT="Available Options:
-h --help
-s: --source:
-t: --target:
-c: --copyright:
-i --import
-p --process
--config:
--debug
--setup
--time::
--test
"

# Various defaults
readonly DEFAULT_CONFIG="~/.goproexif"
readonly DEFAULT_SOURCE="."
readonly DEFAULT_TARGET=""
readonly DEFAULT_COPYRIGHT=""
readonly DEFAULT_TIMEFORMAT='%Y-%m-%d %H:%M:%S'

readonly TIMESTAMP_PRE='perl -pe '"'"'use POSIX strftime; $|=1; print strftime "['
readonly TIMESTAMP_POST='] ", localtime'"'"
readonly DEFAULT_OUTPUT='tee'

# Initializing...
config=$DEFAULT_CONFIG
source=$DEFAULT_SOURCE
target=$DEFAULT_TARGET
copyright=$DEFAULT_COPYRIGHT
output=$DEFAULT_OUTPUT
test=false
setup=false
debug=false
import=false
process=false

function _debug()
{
  # DOES NOT work on eg args listing
  #[ "$debug" = true ] &&  $@
}

function _help()
{
  echo $BANNER
  echo $HELP_TEXT
}

function _setup()
{
  # TODO: Implement some form of default settings setup
}

function _import_media()
{
  echo "Starting media import..."
  echo "Source: "$source
  echo "Target: "$target

  exiftool -r -o $target'/NODATE/'\
 '-FileCreateDate<CreateDate'\
 '-filename<${CreateDate;DateFmt("%Y%m%d%H%M%S")}_'\
'${Model;s/\s/_/g;}_'\
'${CameraSerialNumber;$_=substr($_,-4);}_%f.%e'\
 '-directory<'$target'/${CreateDate;DateFmt("%Y%m%d")}'\
 --ext lrv --ext thm --ext .\
 -api 'Filter=s/HERO10 Black/GoPro_Hero10/g;'\
's/HERO9 Black/GoPro_Hero9/g;'\
's/HERO8 Black/GoPro_Hero8/g'\
 $source

  echo "Finished media import"
}

function _process_media()
{
  echo "Starting media processing..."
  echo "Source: "$source
  echo "Target: "$target
  echo "Copyright: "$copyright

  exiftool -r -o $target'/NODATE/'\
 '-directory<'$target'/${CreateDate;DateFmt("%Y%m%d")}'\
 $copyright \
 '-IPTC:Keywords<${Model;s/\s/_/g;}_${CameraSerialNumber;$_=substr($_,-4);}, '\
'${Software;}, '\
'AutoRotation: ${AutoRotation;}, '\
'Orientation: ${Orientation;}, '\
'SceneCaptureType: ${SceneCaptureType;}, '\
'ProTune: ${ProTune;}, '\
'Sharpness: ${Sharpness;}, '\
'ExposureLockUsed: ${ExposureLockUsed;}, '\
'MeteringMode: ${MeteringMode;}, '\
'GainControl: ${GainControl;}, '\
'Contrast: ${Contrast;}, '\
'Saturation: ${Saturation;}, '\
'WhiteBalance: ${WhiteBalance;}, '\
'HDRSetting: ${HDRSetting;}, '\
'ProjectionType: ${ProjectionType;}, '\
'ImageStabilization: ${ElectronicImageStabilization;}'\
 -api 'Filter=s/HERO10 Black/GoPro_Hero10/g;'\
's/HERO9 Black/GoPro_Hero9/g;'\
's/HERO8 Black/GoPro_Hero8/g'\
 $source

  echo "Finished media processing"
}

# Parse options
declare -A opts
zparseopts -D -E -F -A opts - \
            h -help \
            s: -source: \
            t: -target: \
            c: -copyright: \
            i -import \
            p -process \
            -config: \
            -debug \
            -setup \
            -time:: \
            -test \
	          || exit 1

# remove first -- or -
end_opts=$@[(i)(--|-)]
set -- "${@[0,end_opts-1]}" "${@[end_opts+1,-1]}"

for key val in "${(kv@)opts}"; do
  case $key in
    --config)
      config=$val
    ;;
    -c|--copyright)
      copyright="-artist=$val -author=$val -xmp:copyright=$val"
    ;;
    --debug)
      # Turn on debug output
      debug=true
      # DEBUG output only works AFTER parameter processing has been completed
      # For manual script wide override set the $debug variable to true
    ;;
    -h|--help)
      _help
      exit 1
    ;;
    -i|--import)
      # Perform import tasks
      import=true
    ;;
    -p|--process)
      # Perform process tasks
      process=true
    ;;
    --setup)
      # Perform setup tasks
      setup=true
    ;;
    -s|--source)
      source=$val
    ;;
    -t|--target)
      target=$val
    ;;
    --test)
      test=true
    ;;
    --time)
      if [[ ! -z $val ]]; then
        timeformat=$val
      else
        timeformat=$DEFAULT_TIMEFORMAT
      fi
      output=$TIMESTAMP_PRE$timeformat$TIMESTAMP_POST
    ;;
  esac
done

 printf 'flag %s: %s\n' "${(kv@)opts}"
 echo "argv: $@"

 if [ "$test" = true ]; then
   echo "Removing prior test data..."
   rm -r "./test/imported"
   rm -r "./test/processed"

   echo "Setting up test structure..."
   mkdir "./test/imported"
   mkdir "./test/processed"

   source="./test/originals"
   target="./test/imported"
   _import_media
   source="./test/imported"
   target="./test/processed"
   _process_media
   exit 0
 fi

 if [ -z $target ]; then
   # Empty Target
   echo "Missing target."
   _help
   exit 1
 fi

# so we can timestamp the output
(
echo $BANNER

# only works if the exiftool is installed
if (( ${+commands[exiftool]} )); then
    which exiftool && exiftool -ver
else
    echo "Please install exiftool first, run:"
    echo "brew install exiftool"
    exit 1
fi

if [ "$setup" = true ]; then
  # Setup system...
  _setup
  exit 0
fi

# Execute exiftool transformation
if [ "$import" = true ]; then
  _import_media
elif [ "$process" = true ]; then
  _process_media
fi

) 2>&1 | eval ${output}
