---
name: "Comprehensive Testing"
on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "!scripts/core/logger.zsh"
      - "!scripts/testing/test-suites.zsh"
      - "!scripts/testing/run-tests.zsh"
  push:
    branches: [main, develop, feature/*, release/*, hotfix/*]
    paths:
      - 'scripts/core/logger.zsh'
      - 'scripts/testing/test-suites.zsh'
      - 'scripts/testing/run-tests.zsh'

jobs:
  test:
    name: "Run Comprehensive Tests"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Install dependencies"
        run: |
          # Install zsh
          sudo apt-get update
          sudo apt-get install -y zsh

          # Install exiftool
          sudo apt-get install -y exiftool

          # Install jq
          sudo apt-get install -y jq

          # Verify installations
          echo "zsh version:"
          zsh --version
          echo "exiftool version:"
          exiftool -ver
          echo "jq version:"
          jq --version

      - name: "Make test scripts executable"
        run: |
          chmod +x scripts/testing/*.zsh
          chmod +x goprox

      - name: "Setup output directories"
        run: |
          mkdir -p output/test-results
          mkdir -p output/test-temp

      - name: "Run comprehensive validation"
        run: |
          echo "🧪 Running comprehensive validation..."
          ./scripts/testing/validate-all.zsh

      - name: "Upload test results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "test-results-comprehensive"
          path: "output/test-results/"
          retention-days: 7

      - name: "Upload test logs"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "test-logs-comprehensive"
          path: "output/test-temp/"
          retention-days: 7

  test-summary:
    name: "Test Summary"
    runs-on: "ubuntu-latest"
    needs: test
    if: always()

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Download all test results"
        uses: actions/download-artifact@v4
        with:
          path: "test-results"

      - name: "Generate test summary"
        run: |
          echo "📊 Test Summary Report"
          echo "======================"
          echo "Generated: $(date)"
          echo ""

          # Find all test result files
          find test-results -name "test-report-*.txt" -type f | while read -r report; do
            echo "📋 $(basename "$report"):"
            cat "$report"
            echo ""
            echo "---"
            echo ""
          done

      - name: "Comment on PR"
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let summary = '## 🧪 Test Results\n\n';

            // Check if any test jobs failed
            const testJob = context.payload.workflow_run?.jobs?.find(job => job.name === 'Run Comprehensive Tests');
            if (testJob && testJob.conclusion === 'failure') {
              summary += '❌ **Some tests failed**\n\n';
            } else {
              summary += '✅ **All tests passed**\n\n';
            }

            summary += '### Test Suites Executed:\n';
            summary += '- Configuration Tests\n';
            summary += '- Parameter Processing Tests\n';
            summary += '- Storage Validation Tests\n';
            summary += '- Integration Tests\n\n';

            summary += '📊 **Test Reports**: Available in workflow artifacts\n';
            summary += '🔍 **Test Logs**: Available in workflow artifacts\n\n';

            summary += '---\n';
            summary += '*Generated by GoProX Comprehensive Testing Framework*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  logger-test:
    name: "Logger Unit Test"
    runs-on: "ubuntu-latest"
    if: >-
      github.event_name == 'push' || github.event_name == 'pull_request'
    needs: []
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Install dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install -y zsh exiftool jq

      - name: "Make test scripts executable"
        run: |
          chmod +x scripts/testing/*.zsh

      - name: "Setup output directories"
        run: |
          mkdir -p output/test-results
          mkdir -p output/test-temp

      - name: "Run logger unit test"
        run: |
          echo "🧪 Running logger unit test..."
          ./scripts/testing/run-tests.zsh --logger

      - name: "Upload logger test results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "logger-test-results"
          path: "output/test-results/"
          retention-days: 7
