---
name: Release Automation

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (XX.XX.XX format)'
        required: true
        type: string
      prev_version:
        description: 'Previous version for changelog (XX.XX.XX format)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (no actual release)'
        required: false
        default: 'false'
        type: string
  push:
    branches: [main]
    paths:
      - 'goprox'
      - '.github/workflows/release-automation.yml'

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prev_version: ${{ steps.version.outputs.prev_version }}
      dry_run: ${{ steps.version.outputs.dry_run }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Version Information
        id: version
        run: |
          # Get current version from goprox file
          CURRENT_VERSION=$(grep "__version__=" goprox | cut -d"'" -f2)

          # Determine if this is a manual trigger or automatic
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - use provided inputs
            VERSION="${{ inputs.version }}"
            PREV_VERSION="${{ inputs.prev_version }}"
            DRY_RUN="${{ inputs.dry_run }}"
          else
            # Automatic trigger - detect from git and goprox
            VERSION="$CURRENT_VERSION"

            # Get previous version from git tags
            PREV_VERSION=$(git tag --sort=-version:refname | head -n 1 | sed 's/v//')
            if [[ -z "$PREV_VERSION" ]]; then
              echo "Error: No previous version tag found"
              exit 1
            fi

            # Check if this is actually a version bump
            if [[ "$VERSION" == "$PREV_VERSION" ]]; then
              echo "No version bump detected. Skipping automatic release."
              echo "Current version: $VERSION"
              echo "Previous version: $PREV_VERSION"
              exit 0
            fi

            DRY_RUN="false"
          fi

          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]{2}\.[0-9]{2}\.[0-9]{2}$ ]]; then
            echo "Error: Version must be in format XX.XX.XX"
            exit 1
          fi

          # Validate that goprox file version matches
          if [[ "$CURRENT_VERSION" != "$VERSION" ]]; then
            echo "Error: Version in goprox file ($CURRENT_VERSION) doesn't match detected version ($VERSION)"
            exit 1
          fi

          # Check if this version already exists as a tag
          if git tag | grep -q "v$VERSION"; then
            echo "Error: Version v$VERSION already exists as a tag"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT

          echo "✅ Version validation passed:"
          echo "   Current version: $VERSION"
          echo "   Previous version: $PREV_VERSION"
          echo "   Dry run: $DRY_RUN"

      - name: Debug Information
        run: |
          echo "Current version: ${{ steps.version.outputs.version }}"
          echo "Previous version: ${{ steps.version.outputs.prev_version }}"
          echo "Dry run: ${{ steps.version.outputs.dry_run }}"
          echo "GitHub context:"
          echo "${{ toJson(github) }}"

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [validate-version]
    steps:
      - uses: actions/checkout@v4

      - name: Setup zsh
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install zsh
        run: |
          sudo apt-get update
          sudo apt-get install -y zsh

      - name: Run test suite
        run: |
          ./scripts/testing/run-tests.zsh --test-suite logger
          ./scripts/testing/run-tests.zsh --test-suite basic

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [validate-version, run-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Create release tarball
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Creating release tarball for version $VERSION"

          # Create tarball with version prefix
          tar -czf "goprox-v$VERSION.tar.gz" \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='test' \
            --exclude='output' \
            --exclude='*.log' \
            --exclude='*.tmp' \
            .

      - name: Calculate SHA256
        id: sha256
        run: |
          SHA256=$(shasum -a 256 "goprox-v${{ steps.version.outputs.version }}.tar.gz" | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "SHA256: $SHA256"

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: goprox-v${{ steps.version.outputs.version }}.tar.gz

  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate-version, build-packages]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup zsh
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install zsh
        run: |
          sudo apt-get update
          sudo apt-get install -y zsh

      - name: Verify git history
        run: |
          # Verify we have the correct history
          echo "Current HEAD: $(git rev-parse HEAD)"
          echo "Tag v${{ steps.version.outputs.prev_version }}: $(git rev-parse v${{ steps.version.outputs.prev_version }})"

          # Check if we're using the rewritten history
          if git log --oneline v${{ steps.version.outputs.prev_version }}..HEAD | wc -l | grep -q "397"; then
            echo "❌ Still using old history (397 commits detected)"
            echo "Attempting to force rewritten history..."

            # Force fetch the rewritten history
            git fetch origin main --force

            # Verify again
            COMMIT_COUNT=$(git log --oneline v${{ steps.version.outputs.prev_version }}..HEAD | wc -l)
            echo "Commit count after force fetch: $COMMIT_COUNT"

            if [[ "$COMMIT_COUNT" -eq 397 ]]; then
              echo "❌ Still using old history after force fetch"
              exit 1
            fi
          fi

          # Verify the tag exists and is reachable
          if git rev-parse v${{ steps.version.outputs.prev_version }} >/dev/null 2>&1; then
            echo "✅ Tag v${{ steps.version.outputs.prev_version }} exists and is reachable"
          else
            echo "❌ Tag v${{ steps.version.outputs.prev_version }} not found or not reachable"
            exit 1
          fi

          echo ""
          echo "=== COMMIT RANGE ANALYSIS ==="
          echo "Base version: v${{ steps.version.outputs.prev_version }}"
          echo "Current version: v${{ steps.version.outputs.version }}"
          echo ""
          echo "Total commits since v${{ steps.version.outputs.prev_version }}:"
          git log --oneline v${{ steps.version.outputs.prev_version }}..HEAD | wc -l
          echo ""
          echo "Commits with issue references:"
          git log --oneline v${{ steps.version.outputs.prev_version }}..HEAD | grep "(refs #" | wc -l
          echo ""
          echo "Unique issues referenced:"
          git log --oneline v${{ steps.version.outputs.prev_version }}..HEAD | grep -o "(refs #[0-9]*)" | sort | uniq | wc -l
          echo ""
          echo "Issues with commits since v${{ steps.version.outputs.prev_version }}:"
          git log --oneline v${{ steps.version.outputs.prev_version }}..HEAD | grep -o "(refs #[0-9]*)" | sort | uniq

          # Force garbage collection to ensure clean state
          git gc --prune=now

      - name: Generate changelog
        id: changelog
        run: |
          PREV_VERSION="${{ steps.version.outputs.prev_version }}"
          CURR_VERSION="${{ steps.version.outputs.version }}"

          echo "Generating changelog from v${PREV_VERSION} to v${CURR_VERSION}"

          # Generate changelog using the existing script
          ./scripts/release/generate-release-notes.zsh \
            --version "$CURR_VERSION" \
            --prev-version "$PREV_VERSION" \
            --output release_notes.md

          # Check if changelog was generated successfully
          if [[ ! -f "release_notes.md" ]]; then
            echo "❌ Failed to generate release notes"
            exit 1
          fi

          echo "✅ Release notes generated successfully"
          echo "File size: $(wc -c < release_notes.md) bytes"
          echo "Line count: $(wc -l < release_notes.md) lines"

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-packages, generate-release-notes]
    if: needs.validate-version.outputs.dry_run != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: .

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: GoProX v${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: goprox-v${{ steps.version.outputs.version }}.tar.gz

  update-homebrew:
    name: Update Homebrew
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.validate-version.outputs.dry_run != 'true'
    env:
      HOMEBREW_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: .

      - name: Calculate SHA256
        id: sha256
        run: |
          SHA256=$(shasum -a 256 "goprox-v${{ steps.version.outputs.version }}.tar.gz" | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "SHA256: $SHA256"

      - name: Update Homebrew Formula
        run: |
          # Clone the homebrew-core repository
          git clone https://x-access-token:${HOMEBREW_TOKEN}@github.com/Homebrew/homebrew-core.git
          cd homebrew-core

          # Download the tarball from codeload (same URL Homebrew uses)
          if curl -sL "https://codeload.github.com/fxstein/GoProX/tar.gz/refs/tags/v${{ steps.version.outputs.version }}" -o goprox-codeload.tar.gz; then
            # Calculate SHA256 of the downloaded file
            if SHA256=$(shasum -a 256 goprox-codeload.tar.gz | cut -d' ' -f1); then
              echo "✅ Successfully downloaded and verified tarball"
              echo "SHA256: $SHA256"
            else
              echo "❌ Failed to calculate SHA256 of downloaded file"
              exit 1
            fi
          else
            echo "❌ Failed to download tarball from codeload"
            exit 1
          fi

          # Update the formula with the correct SHA256 from codeload
          sed -i "s|url \".*\"|url \"https://github.com/fxstein/GoProX/archive/refs/tags/v${{ steps.version.outputs.version }}.tar.gz\"|" Formula/goprox.rb
          sed -i "s|sha256 \".*\"|sha256 \"${{ steps.sha256.outputs.sha256 }}\"|" Formula/goprox.rb

          # Commit and push the changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/goprox.rb
          git commit -m "Update goprox to v${{ steps.version.outputs.version }}"
          git push

  dry-run-summary:
    name: Dry Run Summary
    runs-on: ubuntu-latest
    needs: [build-packages, generate-release-notes]
    if: needs.validate-version.outputs.dry_run == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: .

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Display summary
        run: |
          echo "=== DRY RUN SUMMARY ==="
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Previous version: ${{ steps.version.outputs.prev_version }}"
          echo ""
          echo "Package created:"
          ls -la goprox-v${{ steps.version.outputs.version }}.tar.gz
          echo ""
          echo "SHA256:"
          shasum -a 256 goprox-v${{ steps.version.outputs.version }}.tar.gz
          echo ""
          echo "Release notes:"
          cat release_notes.md
          echo ""
          echo "=== DRY RUN COMPLETED ==="
          echo "No actual release was created. Run without dry_run=true to create the release."
